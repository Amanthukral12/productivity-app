// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  googleId  String     @unique
  email     String     @unique
  name      String
  avatar    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  sessions  Session[]
  Note      Note[]
  Category  Category[]
  Todo      Todo[]
  Event     Event[]
}

model Session {
  id           String   @id @default(uuid())
  sessionId    String   @unique
  userId       Int
  refreshToken String   @unique
  deviceInfo   String?
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  lastUsedAt   DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Note {
  id         Int        @id @default(autoincrement())
  title      String
  content    String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  userId     Int
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories Category[] @relation("NoteToCategory")
}

model Category {
  id     Int    @id @default(autoincrement())
  name   String
  userId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  notes  Note[] @relation("NoteToCategory")

  @@unique([name, userId])
}

model Todo {
  id          Int       @id @default(autoincrement())
  title       String
  isComplete  Boolean   @default(false)
  priority    Priority  @default(LOW)
  dueDate     DateTime?
  hasReminder Boolean   @default(false)
  reminderAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Event {
  id          Int        @id @default(autoincrement())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime?
  isAllDay    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isRecurring Boolean    @default(false)
  frequency   Frequency?
  interval    Int?
  weekDays    String?
  monthDays   String?

  reminders EventReminder[]

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model EventReminder {
  id            Int          @id @default(autoincrement())
  minutesBefore Int
  reminderType  ReminderType
  eventId       Int
  event         Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Frequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum ReminderType {
  PUSH_NOTIFICATION
  IN_APP
}
